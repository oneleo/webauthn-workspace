// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.0 <0.9.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/contracts/utils/Create2.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/contracts/utils/cryptography/ECDSA.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/contracts/proxy/utils/Initializable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/contracts/proxy/utils/UUPSUpgradeable.sol";

import "https://github.com/eth-infinitism/account-abstraction/blob/v0.6.0/contracts/core/BaseAccount.sol";
import "https://github.com/eth-infinitism/account-abstraction/blob/v0.6.0/contracts/interfaces/IEntryPoint.sol";
import "https://github.com/eth-infinitism/account-abstraction/blob/v0.6.0/contracts/samples/callback/TokenCallbackHandler.sol";

import "https://github.com/Banana-Wallet/passkey-contracts/blob/c923c160d7294394cb11a72fdff985039fb1d00c/contracts/utils/Base64.sol";
import "https://github.com/Banana-Wallet/passkey-contracts/blob/c923c160d7294394cb11a72fdff985039fb1d00c/contracts/interfaces/IPasskeyManager.sol";
import "https://github.com/Banana-Wallet/passkey-contracts/blob/c923c160d7294394cb11a72fdff985039fb1d00c/contracts/core/PasskeyVerificationLibrary.sol";

contract PassKeyManagerFactory {
    PasskeyManager public immutable accountImplementation;

    // ENTRY_POINT_ADDRESS="0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    constructor(IEntryPoint entryPoint) {
        accountImplementation = new PasskeyManager(entryPoint);
    }

    function createAccount(
        uint256 salt,
        string calldata encodedId,
        uint256 pubKeyX,
        uint256 pubKeyY
    ) public returns (PasskeyManager) {
        address addr = getAddress(salt, encodedId, pubKeyX, pubKeyY);
        uint codeSize = addr.code.length;
        if (codeSize > 0) {
            return PasskeyManager(payable(addr));
        }
        return
            PasskeyManager(
                payable(
                    new ERC1967Proxy{salt: bytes32(salt)}(
                        address(accountImplementation),
                        abi.encodeCall(
                            PasskeyManager.initialize,
                            (encodedId, pubKeyX, pubKeyY)
                        )
                    )
                )
            );
    }

    function getAddress(
        uint256 salt,
        string calldata encodedId,
        uint256 pubKeyX,
        uint256 pubKeyY
    ) public view returns (address) {
        return
            Create2.computeAddress(
                bytes32(salt),
                keccak256(
                    abi.encodePacked(
                        type(ERC1967Proxy).creationCode,
                        abi.encode(
                            address(accountImplementation),
                            abi.encodeCall(
                                PasskeyManager.initialize,
                                (encodedId, pubKeyX, pubKeyY)
                            )
                        )
                    )
                )
            );
    }
}

contract SimpleAccount is BaseAccount, TokenCallbackHandler, UUPSUpgradeable, Initializable {
    using ECDSA for bytes32;

    address public owner;

    IEntryPoint private immutable _entryPoint;

    event SimpleAccountInitialized(IEntryPoint indexed entryPoint, address indexed owner);

    modifier onlyOwner() {
        _onlyOwner();
        _;
    }

    /// @inheritdoc BaseAccount
    function entryPoint() public view virtual override returns (IEntryPoint) {
        return _entryPoint;
    }

    receive() external payable {}

    constructor(IEntryPoint anEntryPoint) {
        _entryPoint = anEntryPoint;
        _disableInitializers();
    }

    function _onlyOwner() internal view {
        require(msg.sender == owner || msg.sender == address(this), "only owner");
    }

    function execute(address dest, uint256 value, bytes calldata func) external {
        _requireFromEntryPointOrOwner();
        _call(dest, value, func);
    }

    function executeBatch(address[] calldata dest, bytes[] calldata func) external {
        _requireFromEntryPointOrOwner();
        require(dest.length == func.length, "wrong array lengths");
        for (uint256 i = 0; i < dest.length; i++) {
            _call(dest[i], 0, func[i]);
        }
    }

    function initialize(address anOwner) public virtual initializer {
        _initialize(anOwner);
    }

    function _initialize(address anOwner) internal virtual {
        owner = anOwner;
        emit SimpleAccountInitialized(_entryPoint, owner);
    }

    function _requireFromEntryPointOrOwner() internal view {
        require(msg.sender == address(entryPoint()) || msg.sender == owner, "account: not Owner or EntryPoint");
    }

    /// implement template method of BaseAccount
    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)
    internal override virtual returns (uint256 validationData) {
        bytes32 hash = userOpHash.toEthSignedMessageHash();
        if (owner != hash.recover(userOp.signature))
            return SIG_VALIDATION_FAILED;
        return 0;
    }

    function _call(address target, uint256 value, bytes memory data) internal {
        (bool success, bytes memory result) = target.call{value : value}(data);
        if (!success) {
            assembly {
                revert(add(result, 32), mload(result))
            }
        }
    }

    function getDeposit() public view returns (uint256) {
        return entryPoint().balanceOf(address(this));
    }

    function addDeposit() public payable {
        entryPoint().depositTo{value : msg.value}(address(this));
    }

    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {
        entryPoint().withdrawTo(withdrawAddress, amount);
    }

    function _authorizeUpgrade(address newImplementation) internal view override {
        (newImplementation);
        _onlyOwner();
    }
}

contract PasskeyManager is SimpleAccount, IPasskeyManager {
    mapping(bytes32 => Passkey) private PasskeysAuthorised;
    bytes32[] public KnownEncodedIdHashes;

    constructor(IEntryPoint anEntryPoint) SimpleAccount(anEntryPoint) {}

    function initialize(
        string calldata _encodedId,
        uint256 _pubKeyX,
        uint256 _pubKeyY
    ) public virtual initializer {
        super._initialize(address(0));
        bytes32 hashEncodedId = keccak256(abi.encodePacked(_encodedId));
        _addPasskey(hashEncodedId, _encodedId, _pubKeyX, _pubKeyY);
    }

    function addPasskey(
        string calldata _encodedId,
        uint256 _publicKeyX,
        uint256 _publicKeyY
    ) public override {
        bytes32 hashEncodedId = keccak256(abi.encodePacked(_encodedId));
        _addPasskey(hashEncodedId, _encodedId, _publicKeyX, _publicKeyY);
    }

    function _addPasskey(
        bytes32 hashEncodedId,
        string calldata _encodedId,
        uint256 _publicKeyX,
        uint256 _publicKeyY
    ) internal {
        require(
            PasskeysAuthorised[hashEncodedId].pubKeyX == 0 &&
                PasskeysAuthorised[hashEncodedId].pubKeyY == 0,
            "PM01: Passkey already exists"
        );

        Passkey memory passkey = Passkey({
            pubKeyX: _publicKeyX,
            pubKeyY: _publicKeyY
        });
        KnownEncodedIdHashes.push(hashEncodedId);
        PasskeysAuthorised[hashEncodedId] = passkey;
        emit PasskeyAdded(_encodedId, _publicKeyX, _publicKeyY);
    }

    function removePasskey(string calldata _encodedId) external override {
        require(
            KnownEncodedIdHashes.length > 1,
            "PM03: cannot remove last key"
        );
        bytes32 hashEncodedId = keccak256(abi.encodePacked(_encodedId));

        Passkey memory passkey = PasskeysAuthorised[hashEncodedId];

        require(
            passkey.pubKeyX != 0 && passkey.pubKeyX != 0,
            "PM04: Passkey doesn't exist"
        );

        delete PasskeysAuthorised[hashEncodedId];
        for (uint i = 0; i < KnownEncodedIdHashes.length; ) {
            if (KnownEncodedIdHashes[i] == hashEncodedId) {
                KnownEncodedIdHashes[i] = KnownEncodedIdHashes[
                    KnownEncodedIdHashes.length - 1
                ];
                KnownEncodedIdHashes.pop();
                break;
            }
            unchecked {
                i++;
            }
        }
        emit PasskeyRemoved(_encodedId, passkey.pubKeyX, passkey.pubKeyY);
    }

    function _validateSignature(
        UserOperation calldata userOp,
        bytes32 userOpHash
    ) internal virtual override returns (uint256) {
        (
            uint r,
            uint s,
            bytes memory authenticatorData,
            string memory clientDataJSONPre,
            string memory clientDataJSONPost,
            bytes32 encodedIdHash
        ) = abi.decode(
                userOp.signature,
                (uint, uint, bytes, string, string, bytes32)
            );

        string memory opHashBase64 = Base64.encode(bytes.concat(userOpHash));
        string memory clientDataJSON = string.concat(
            clientDataJSONPre,
            opHashBase64,
            clientDataJSONPost
        );
        bytes32 clientHash = sha256(bytes(clientDataJSON));
        bytes32 message = sha256(bytes.concat(authenticatorData, clientHash));

        Passkey memory passKey = PasskeysAuthorised[encodedIdHash];
        require(
            passKey.pubKeyX != 0 && passKey.pubKeyY != 0,
            "PM06: Passkey doesn't exist"
        );
        require(
            Secp256r1.Verify(passKey, r, s, uint(message)),
            "PM07: Invalid signature"
        );
        return 0;
    }
}
